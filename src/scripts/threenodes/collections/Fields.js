// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['Underscore', 'Backbone', 'cs!threenodes/models/Field'], function(_, Backbone) {

    /* Fields Collection */
    var FieldsCollection;
    return namespace("ThreeNodes", {
      FieldsCollection: FieldsCollection = (function(_super) {
        __extends(FieldsCollection, _super);

        function FieldsCollection() {
          this.renderSidebar = __bind(this.renderSidebar, this);
          this.addFields = __bind(this.addFields, this);
          this.addField = __bind(this.addField, this);
          this.removeConnections = __bind(this.removeConnections, this);
          this.renderConnections = __bind(this.renderConnections, this);
          this.setFieldInputUnchanged = __bind(this.setFieldInputUnchanged, this);
          this.hasUnconnectedFields = __bind(this.hasUnconnectedFields, this);
          this.hasUnconnectedOutputs = __bind(this.hasUnconnectedOutputs, this);
          this.hasUnconnectedInputs = __bind(this.hasUnconnectedInputs, this);
          this.getDownstreamNodes = __bind(this.getDownstreamNodes, this);
          this.getUpstreamNodes = __bind(this.getUpstreamNodes, this);
          this.getMaxInputSliceCount = __bind(this.getMaxInputSliceCount, this);
          this.setField = __bind(this.setField, this);
          this.getField = __bind(this.getField, this);
          this.toJSON = __bind(this.toJSON, this);
          this.load = __bind(this.load, this);
          this.destroy = __bind(this.destroy, this);
          this.initialize = __bind(this.initialize, this);
          return FieldsCollection.__super__.constructor.apply(this, arguments);
        }

        FieldsCollection.prototype.initialize = function(models, options) {
          FieldsCollection.__super__.initialize.apply(this, arguments);
          this.node = options.node;
          this.indexer = options.indexer;
          this.inputs = {};
          this.outputs = {};
          this.special_elements = {
            left: [],
            center: [],
            right: []
          };
          return this.addFields(this.node.getFields());
        };

        FieldsCollection.prototype.destroy = function() {
          this.removeConnections();
          while (this.models.length > 0) {
            this.models[0].remove();
          }
          delete this.node;
          delete this.inputs;
          delete this.outputs;
          delete this.indexer;
          return delete this.special_elements;
        };

        FieldsCollection.prototype.load = function(data) {
          var f, node_field, _i, _len, _ref;
          if (!data || !data["in"]) {
            return false;
          }
          _ref = data["in"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if (!f.nid) {
              node_field = this.inputs[f.name];
            } else {
              node_field = this.inputs[f.name + "-" + f.nid];
            }
            if (node_field) {
              node_field.load(f.val);
            }
          }
          return true;
        };

        FieldsCollection.prototype.toJSON = function() {
          var data;
          data = {
            "in": jQuery.map(this.inputs, function(f, i) {
              return f.toJSON();
            }),
            out: jQuery.map(this.outputs, function(f, i) {
              return f.toJSON();
            })
          };
          return data;
        };

        FieldsCollection.prototype.getField = function(key, is_out) {
          var target;
          if (is_out == null) {
            is_out = false;
          }
          target = is_out === true ? "outputs" : "inputs";
          return this[target][key];
        };

        FieldsCollection.prototype.setField = function(key, value) {
          if (this.outputs[key]) {
            return this.outputs[key].setValue(value);
          }
        };

        FieldsCollection.prototype.getMaxInputSliceCount = function() {
          var f, fname, result, val, _ref;
          result = 1;
          _ref = this.inputs;
          for (fname in _ref) {
            f = _ref[fname];
            val = f.attributes.value;
            if (val && $.type(val) === "array") {
              if (val.length > result) {
                result = val.length;
              }
            }
          }
          return result - 1;
        };

        FieldsCollection.prototype.getUpstreamNodes = function() {
          var c, f, fname, res, _i, _len, _ref, _ref1;
          res = [];
          _ref = this.inputs;
          for (fname in _ref) {
            f = _ref[fname];
            _ref1 = f.connections;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              c = _ref1[_i];
              res[res.length] = c.from_field.node;
            }
          }
          return res;
        };

        FieldsCollection.prototype.getDownstreamNodes = function() {
          var c, f, fname, res, _i, _j, _len, _len1, _ref, _ref1;
          res = [];
          _ref = this.outputs;
          for (f = _i = 0, _len = _ref.length; _i < _len; f = ++_i) {
            fname = _ref[f];
            f = this.inputs[fname];
            _ref1 = f.connections;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              c = _ref1[_j];
              res[res.length] = c.to_field.node;
            }
          }
          return res;
        };

        FieldsCollection.prototype.hasUnconnectedInputs = function() {
          var f, fname, _ref;
          _ref = this.inputs;
          for (fname in _ref) {
            f = _ref[fname];
            if (f.connections.length === 0) {
              return true;
            }
          }
          return false;
        };

        FieldsCollection.prototype.hasUnconnectedOutputs = function() {
          var f, fname, _ref;
          _ref = this.outputs;
          for (fname in _ref) {
            f = _ref[fname];
            if (f.connections.length === 0) {
              return true;
            }
          }
          return false;
        };

        FieldsCollection.prototype.hasUnconnectedFields = function() {
          return hasUnconnectedInputs() || hasUnconnectedOutputs();
        };

        FieldsCollection.prototype.setFieldInputUnchanged = function() {
          var f, fname, _i, _len, _ref, _results;
          _ref = this.inputs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fname = _ref[_i];
            f = this.inputs[fname];
            _results.push(f.changed = false);
          }
          return _results;
        };

        FieldsCollection.prototype.renderConnections = function() {
          return this.invoke("renderConnections");
        };

        FieldsCollection.prototype.removeConnections = function() {
          return this.invoke("removeConnections");
        };

        FieldsCollection.prototype.addField = function(name, value, direction) {
          var f, field, field_index, field_is_out, target;
          if (direction == null) {
            direction = "inputs";
          }
          f = false;
          field_is_out = direction !== "inputs";
          if ($.type(value) !== "object") {
            value = this.getFieldValueObject(value);
          }
          field = new ThreeNodes.fields[value.type]({
            name: name,
            value: value.val,
            possibilities: value.values,
            node: this.node,
            is_output: field_is_out,
            "default": value["default"],
            subfield: value.subfield,
            indexer: this.indexer
          });
          target = field.get("is_output") === false ? "inputs" : "outputs";
          field_index = field.get("name");
          if (field.subfield) {
            field_index += "-" + field.subfield.node.get("nid");
          }
          this[target][field_index] = field;
          this.add(field);
          return field;
        };

        FieldsCollection.prototype.addFields = function(fields_array) {
          var dir, fname, value;
          for (dir in fields_array) {
            for (fname in fields_array[dir]) {
              value = fields_array[dir][fname];
              this.addField(fname, value, dir);
            }
          }
          return this;
        };

        FieldsCollection.prototype.renderSidebar = function() {
          this.trigger("renderSidebar");
          return this;
        };

        FieldsCollection.prototype.getFieldValueObject = function(default_value) {
          var ftype, res;
          ftype = (function() {
            switch ($.type(default_value)) {
              case "number":
                return "Float";
              case "boolean":
                return "Bool";
              default:
                return "String";
            }
          })();
          res = {
            type: ftype,
            val: default_value
          };
          return res;
        };

        return FieldsCollection;

      })(Backbone.Collection)
    });
  });

}).call(this);
